#!/bin/bash

# directory variables
terraform_dir="/home/j4s/auto/terraform"
ansible_host_dir="/etc/ansible/hosts"
ansible_playbook="/home/j4s/auto/ansible"
log_dir="/var/vm_deployment/logs"
credentials_dir="/home/j4s/auto/cred"

# main function to run new deployment
new::run() {
    echo "initializing new deployment ..."

    # reading mandatory variables with values
    local depl_name=$(readopt -n --name)
    if [ -z "${depl_name}" ]; then
        echo "ERROR: vm deployment - No name provided with --name"
        exit 1
    fi

    local vm_id=$(readopt -i --id)
    if [ -z "${vm_id}" ]; then
        echo "ERROR: vm deployment - No id provided with --id"
        exit 1
    fi

    local vm_count=$(readopt -c --count)
    if [ -z "${vm_count}" ]; then
        echo "ERROR: vm deployment - No count provided with --count"
        exit 1
    fi

    # temp ansible file
    if [ -f "/tmp/new_hosts" ]; then
        sed -i '2,$d' "/tmp/new/hosts"
    else
        echo "[new_servers]" > "/tmp/new_hosts"

    # create unique terraform workspace
    cd $terraform_dir
    
    local random_num=$(printf "%05d" $((RANDOM % 100000)))
    local ws_name="${depl_name}_${random_num}"

    terraform workspace new $ws_name || echo "workspace already existing" && exit 1
    if [ $? -eq 0 ]; then
        echo "created workspace" >> $log_dir/$depl_name.log 2>&1
    else
        echo "Error: workspace could not be created. please check $depl_name.log."
        exit 1
    fi

    # create terraform deployment plan with provided values
    terraform plan --out "$depl_name.tfplan" -var="vm_count=$vm_count" -var="vm_id=$vm_id" -var="depl_name=$depl_name" >> $log_dir/$depl_name.log 2>&1

    # start terraform deployment
    echo "starting vm installation ..."
    terraform apply "$depl_name.tfplan"
    # .tfplan will be created in terraform main dir, move it to /deployments

    # executes dns config function
    dns_config

    echo ""
    echo "Installation done"
}

# description for help
new::description() {
    echo "Deploy one or more new proxmox vms"
}

# usage of command for help 
new::usage() {
    cat <<EOT
    -n --name <name>                    Name of new vms, will be the Proxmox and Hostname
    -i --id <system id>                 ID of new vms, will be appended to the name for identifying
    -c --count <amount of new vms>      Amount of new vms to be set up
EOT
}

# dns config to add deployments to bind9 dns server on raspberry pi
dns_config() {
    echo "starting dns config ..."

    # add all vms to dns that have been deployed
    for ((i=1; i<=$vm_count; i++))
    do
        # variable for vm ip with id identifier
        local vm_ip="10.10.21.$vm_id"

        # naming convention for bind9 config file
        local vm_ip_config="$depl_name$vm_id         IN     A      $vm_ip"

        # connect to raspberry pi
        # add vm_ip_config var to bind9 config file and restart docker
        ssh raspi << EOF >> $log_dir/$depl_name.log 2>&1
            echo "$vm_ip_config" >> /bind9/config/db.caesarlab.cc
            cd /bind9
            docker-compose restart
EOF
        # if multiple vms will be deployed count up the id for uniqueness
        local vm_id=$((vm_id + 1))   
    done
}