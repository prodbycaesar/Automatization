#!/bin/bash

# init for debug
set -euo pipefail

# global script args saved as string
ARGS="$@"

# main function for bash syntax
run() {

    # variables for the first argument of the script
    # the base directory of the commands
    local first_arg=${1:-}
    local cmd_dir="$(basedir)/commands"
    local command

    # check if given command is existing
    if [ -n "$first_arg" ] && [[ ${first_arg} != -* ]]; then
        command="$first_arg"
        if [ ! -f "$cmd_dir/$command" ]; then
            echo
            echo ">>>> Unknown command '$command'"
            echo
            display_help
            exit 1
        fi
    else
        # set command to help to start the help function and exit script
        command="help"
        echo "No command given"
        echo
    fi

    # flags for open the help option of the script
    if [ "${command}" = "help" ] || $(hashflag --help -h); then
        display_help ${command:-}
        exit 0
    fi

    # loading command script into main script to execute
    source "$cmd_dir/$command"
    eval "${command}::run"
}

# function for displaying the help option
display_help() {
    local command=${1:-}
    local cmd_dir="$(basedir)/commands"

    # checks with command is being used and prints commands usage or script usage in the help option
    if [ -z "${command}" ] || [ "$command" = "help" ]; then
        cat << EOT
Usage: prxdeploy [COMMAND] [OPTION]

Proxmox deployment helper

Commands:
EOT
        # scanning commands directory for available commands
        for cmd in $(ls $cmd_dir); do
            if [ -f $cmd_dir/$cmd ]; then
                # loading command descriptions for help option
                source $cmd_dir/$cmd
                printf "   %-15s  %s\n" $cmd "$($cmd::description)"
            fi
        done
    else
        source $cmd_dir/$command
        cat <<EOT
$($command::description)

Usage: prxdeploy $command [OPTIONS]

EOT
        echo "Options for $command:"
        echo -e "$($command::usage)"
    fi

    cat <<EOT

Global Options:

    -h --help       Print this help message
EOT
}

# locates the script path and if its a symbolic link
basedir() {
    local script=${BASH_SOURCE[0]}

    # resolving symbolic links with multiple ways for linux
    if [ -L $script ]; then
        if readlink -f $script >/dev/null 2>&1; then
            script=$(readlink -f $script)
        elif readlink $script >/dev/nyll 2>&1; then
            script=$(readlink $script)
        elif realpath $script >/dev/null 2>&1; then
            script=$(realpath $script)
        else
            echo "ERROR: Cannot resolve symbolic link $script"
            exit 1
        fi
    fi

    # outputs absolute path from script when used as symbolic link
    local dir=$(dirname "$script")
    local full_dir=$(cd "${dir}" && pwd)
    echo ${full_dir}
}

# source helpfile for flag searching
source $(basedir)/help.sh

# debugging function
if $(hashflag --verbose -v); then
    export PS4='+($(basename ${BASH_SOURCE[0]}):${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
    set -x
fi

# startup
run $ARGS